diff --git a/common/platform/ctlcmd/ctlcmd.go b/common/platform/ctlcmd/ctlcmd.go
index ed770b555..afbcf1e0a 100644
--- a/common/platform/ctlcmd/ctlcmd.go
+++ b/common/platform/ctlcmd/ctlcmd.go
@@ -3,42 +3,32 @@ package ctlcmd
 import (
 	"io"
 	"os"
-	"os/exec"
 
 	"v2ray.com/core/common/buf"
-	"v2ray.com/core/common/platform"
+
+	"github.com/gogo/protobuf/proto"
+	"v2ray.com/ext/tools/conf/serial"
+	"bytes"
 )
 
 //go:generate errorgen
 
 func Run(args []string, input io.Reader) (buf.MultiBuffer, error) {
-	v2ctl := platform.GetToolLocation("v2ctl")
-	if _, err := os.Stat(v2ctl); err != nil {
-		return nil, newError("v2ctl doesn't exist").Base(err)
+	pbConfig, err := serial.LoadJSONConfig(input)
+	if err != nil {
+		os.Stderr.WriteString("failed to parse json config: " + err.Error())
+		os.Exit(-1)
 	}
 
-	var errBuffer buf.MultiBufferContainer
-	var outBuffer buf.MultiBufferContainer
-
-	cmd := exec.Command(v2ctl, args...)
-	cmd.Stderr = &errBuffer
-	cmd.Stdout = &outBuffer
-	cmd.SysProcAttr = getSysProcAttr()
-	if input != nil {
-		cmd.Stdin = input
+	bytesConfig, err := proto.Marshal(pbConfig)
+	if err != nil {
+		os.Stderr.WriteString("failed to marshal proto config: " + err.Error())
+		os.Exit(-1)
 	}
 
-	if err := cmd.Start(); err != nil {
-		return nil, newError("failed to start v2ctl").Base(err)
-	}
+	stdoutReader := bytes.NewReader(bytesConfig)
 
-	if err := cmd.Wait(); err != nil {
-		msg := "failed to execute v2ctl"
-		if errBuffer.Len() > 0 {
-			msg += ": " + errBuffer.MultiBuffer.String()
-		}
-		return nil, newError(msg).Base(err)
-	}
+	outBuffer, err := buf.ReadFrom(stdoutReader)
 
-	return outBuffer.MultiBuffer, nil
+	return outBuffer, nil
 }
