#!/bin/sh /etc/rc.common
# Copyright (c) 2011-2015 OpenWrt.org

START=60

USE_PROCD=1

PDNSD_BIN="/var/sbin/dnscache"
DNSMASQ_RESTART=N
DNS_SERVER="114.114.114.114,114.114.115.115"

pdnsd_genconfig() {
  DNS_SERVER=$(uci get flowoffload.@flow[0].dns_server 2>/dev/null)

	[ -d /var/etc ] || mkdir -p /var/etc
	
  if [ ! -f /var/dnscache/pdnsd.cache ]; then
    mkdir -p /var/dnscache
    echo -ne "pd13\000\000\000\000" > /var/dnscache/pdnsd.cache
    chown -R nobody.nogroup /var/dnscache
	fi
	
	cat > /var/etc/dnscache.conf <<EOF
global {
    perm_cache=1024;        # dns缓存大小，单位KB，建议不要写的太大
    cache_dir="/var/dnscache";     # 缓存文件的位置
    pid_file = /var/run/dnscache.pid;
    server_ip = 0.0.0.0;        # pdnsd监听的网卡，0.0.0.0是全部网卡
    server_port=5333;           # pdnsd监听的端口，不要和别的服务冲突即可
    status_ctl = on;
    paranoid=on;                  # 二次请求模式，如果请求主DNS服务器返回的是垃圾地址，就向备用服务器请求
    query_method=udp_only;      
    neg_domain_pol = off;  
    par_queries = 400;          # 最多同时请求数
    min_ttl = 1h;               # DNS结果最短缓存时间
    max_ttl = 1w;               # DNS结果最长缓存时间
    timeout = 10;               # DNS请求超时时间，单位秒
}

server {  
    label = "routine";         
    ip = $DNS_SERVER;     # 这里为主要上级 dns 的 ip 地址，建议填写一个当地最快的DNS地址  
    timeout = 5;              # DNS请求超时时间
    reject = 8.7.198.45,  # 以下是脏IP，也就是DNS污染一般会返回的结果，如果收到如下DNS结果会触发二次请求（TCP协议一般不会碰到脏IP）
	31.13.64.1,
	31.13.64.33,
	31.13.64.49,
	31.13.65.1,
	31.13.65.17,
	31.13.65.18,
	31.13.66.1,
	31.13.66.6,
	31.13.66.23,
	31.13.68.1,
	31.13.68.22,
	31.13.69.33,
	31.13.69.86,
	31.13.69.129,
	31.13.69.160,
	31.13.70.1,
	31.13.70.20,
	31.13.71.7,
	31.13.71.23,
	31.13.72.1,
	31.13.72.17,
	31.13.72.23,
	31.13.72.34,
	31.13.72.54,
	31.13.73.1,
	31.13.73.17,
	31.13.73.23,
	31.13.74.1,
	31.13.74.17,
	31.13.75.17,
	31.13.75.18,
	31.13.76.8,
	31.13.76.16,
	31.13.77.33,
	31.13.77.55,
	31.13.78.65,
	31.13.78.66,
	31.13.79.1,
	31.13.79.17,
	31.13.80.1,
	31.13.80.17,
	31.13.81.1,
	31.13.81.17,
	31.13.82.1,
	31.13.82.17,
	31.13.82.23,
	31.13.83.1,
	31.13.83.8,
	31.13.83.16,
	31.13.84.1,
	31.13.84.8,
	31.13.84.16,
	31.13.85.1,
	31.13.85.8,
	31.13.85.16,
	31.13.86.1,
	31.13.86.8,
	31.13.86.16,
	31.13.97.245,
	31.13.97.248,
	46.82.174.68,
	59.24.3.173,
	64.13.192.74,
	64.13.192.76,
	64.13.232.149,
	66.220.146.94,
	66.220.147.11,
	66.220.147.44,
	66.220.147.47,
	66.220.149.18,
	66.220.149.32,
	66.220.149.99,
	66.220.151.20,
	66.220.152.17,
	66.220.152.28,
	66.220.155.12,
	66.220.155.14,
	66.220.158.32,
	67.15.100.252,
	67.15.129.210,
	67.228.37.26,
	67.228.74.123,
	67.228.102.32,
	67.228.126.62,
	67.228.221.221,
	67.228.235.91,
	67.228.235.93,
	69.63.176.15,
	69.63.176.59,
	69.63.176.143,
	69.63.178.13,
	69.63.180.173,
	69.63.181.11,
	69.63.181.12,
	69.63.184.14,
	69.63.184.30,
	69.63.184.142,
	69.63.186.30,
	69.63.186.31,
	69.63.187.12,
	69.63.189.16,
	69.63.190.26,
	69.171.224.12,
	69.171.224.40,
	69.171.224.85,
	69.171.225.13,
	69.171.227.37,
	69.171.228.20,
	69.171.228.74,
	69.171.229.11,
	69.171.229.28,
	69.171.229.73,
	69.171.230.18,
	69.171.232.21,
	69.171.233.24,
	69.171.233.33,
	69.171.233.37,
	69.171.234.18,
	69.171.234.29,
	69.171.234.48,
	69.171.235.16,
	69.171.235.64,
	69.171.235.101,
	69.171.237.16,
	69.171.237.26,
	69.171.239.11,
	69.171.240.27,
	69.171.242.11,
	69.171.242.30,
	69.171.244.11,
	69.171.244.12,
	69.171.244.15,
	69.171.245.49,
	69.171.245.53,
	69.171.245.84,
	69.171.246.9,
	69.171.247.20,
	69.171.247.32,
	69.171.247.71,
	69.171.248.65,
	69.171.248.112,
	69.171.248.128,
	74.86.3.208,
	74.86.12.172,
	74.86.12.173,
	74.86.17.48,
	74.86.118.24,
	74.86.142.55,
	74.86.151.162,
	74.86.151.167,
	74.86.226.234,
	74.86.228.110,
	74.86.235.236,
	75.126.2.43,
	75.126.33.156,
	75.126.115.192,
	75.126.124.162,
	75.126.135.131,
	75.126.150.210,
	75.126.164.178,
	75.126.215.88,
	78.16.49.15,
	88.191.249.182,
	88.191.249.183,
	88.191.253.157,
	93.46.8.89,
	173.252.73.48,
	173.252.100.21,
	173.252.100.32,
	173.252.102.16,
	173.252.102.241,
	173.252.103.64,
	173.252.110.21,
	174.36.196.242,
	174.36.228.136,
	174.37.54.20,
	174.37.154.236,
	174.37.175.229,
	199.16.156.7,
	199.16.156.40,
	199.16.158.190,
	199.59.148.14,
	199.59.148.97,
	199.59.148.140,
	199.59.148.209,
	199.59.149.136,
	199.59.149.244,
	199.59.150.11,
	199.59.150.49,
	205.186.152.122,
	208.43.170.231,
	208.43.237.140,
	208.101.21.43,
	208.101.48.171,
	208.101.60.87,
	243.185.187.39;  
    reject_policy = fail;  
}

server {  
    label = "special";                  # 这个随便写  
    ip = 208.67.222.222,208.67.220.220; # 这里为备用DNS服务器的 ip 地址  
    port = 5353;                        # 推荐使用53以外的端口（DNS服务器必须支持） 
    proxy_only = on;
    timeout = 5;  
}  

source {
	owner=localhost;
//	serve_aliases=on;
	file="/etc/hosts";
}

rr {
	name=localhost;
	reverse=on;
	a=127.0.0.1;
	owner=localhost;
	soa=localhost,root.localhost,42,86400,900,86400,86400;
}
EOF
  
  [ -d /var/sbin ] || mkdir -p /var/sbin
  [ -f /var/sbin/dnscache ] || cp -a /usr/sbin/pdnsd /var/sbin/dnscache
	echo "Start DNS Cache"
}

stop_pdnsd() {
  kill $(pidof dnscache) >/dev/null 2>&1 || kill -9 $(ps | grep dnscache | grep -v grep | awk '{print $1}') >/dev/null 2>&1
  echo "Stop DNS Cache"
}

change_dns() {
 	uci delete dhcp.@dnsmasq[0].server >/dev/null 2>&1
	uci add_list dhcp.@dnsmasq[0].server=127.0.0.1#5333
	uci set dhcp.@dnsmasq[0].resolvfile=/tmp/resolv.conf.auto
	uci set dhcp.@dnsmasq[0].noresolv=0
	uci commit dhcp
}

revert_dns() {
	uci del_list dhcp.@dnsmasq[0].server=127.0.0.1#5333 >/dev/null 2>&1
	uci set dhcp.@dnsmasq[0].resolvfile=/tmp/resolv.conf.auto
	uci set dhcp.@dnsmasq[0].noresolv=0
	uci commit dhcp
}

start_service(){
  dns=$(uci get flowoffload.@flow[0].dns 2>/dev/null)
  bbr=$(uci get flowoffload.@flow[0].bbr 2>/dev/null)
  if [ $dns -eq 1 ];  then
    pdnsd_genconfig
    procd_open_instance
    procd_set_param command "$PDNSD_BIN" -c /var/etc/dnscache.conf
    procd_set_param respawn
    procd_set_param stderr 1
    procd_close_instance
    change_dns
  fi
  if [ $bbr -eq 1 ];  then
    sysctl -w net.ipv4.tcp_congestion_control=bbr
  else
    sysctl -w net.ipv4.tcp_congestion_control=cubic
  fi
  uci set firewall.@defaults[0].flow_offloading=$(uci get flowoffload.@flow[0].flow_offloading)
  uci set firewall.@defaults[0].flow_offloading_hw=$(uci get flowoffload.@flow[0].flow_offloading_hw)
  uci commit firewall
  if [ "$DNSMASQ_RESTART" = N ]; then
    /etc/init.d/dnsmasq restart && echo "DNSMASQ change"
    /etc/init.d/firewall restart
  fi
}

stop_service(){
    dns=$(uci get firewall.@defaults[0].dns 2>/dev/null)
    revert_dns
    uci set firewall.@defaults[0].flow_offloading=$(uci get flowoffload.@flow[0].flow_offloading)
    uci set firewall.@defaults[0].flow_offloading_hw=$(uci get flowoffload.@flow[0].flow_offloading_hw)
    uci commit firewall
	  if [ "$DNSMASQ_RESTART" = N ]; then
      /etc/init.d/dnsmasq restart && echo "DNSMASQ revert"
      /etc/init.d/firewall restart
    fi
}

restart(){
    DNSMASQ_RESTART=Y
    stop
    start
	  /etc/init.d/dnsmasq restart && echo "DNSMASQ restart"
    /etc/init.d/firewall restart
}

