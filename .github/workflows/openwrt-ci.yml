# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  # schedule:
  #   - cron: 0 20 * * *
  push:
    branches: 
      - master
  release:
    types: [published]
    
permissions:
  contents: read

jobs:

  build_openwrt:

    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: 自定义插件
        run: |
          git clone https://github.com/fw876/helloworld.git package/luci-app-ssr-plus
          git clone https://github.com/xiaorouji/openwrt-passwall.git package/luci-app-passwall
          git clone https://github.com/sbwml/luci-app-alist package/alist
          mkdir package/luci-app-openclash
          cd package/luci-app-openclash
          git init
          git remote add -f origin https://github.com/vernesong/OpenClash.git
          git config core.sparsecheckout true
          echo "luci-app-openclash" >> .git/info/sparse-checkout
          git pull origin master
          git branch --set-upstream-to=origin/master master
            
      - name: Update feeds
        run: |
          sed -i '$a src-git helloworld https://github.com/fw876/helloworld' feeds.conf.default
          sed -i '$a src-git passwall2 https://github.com/xiaorouji/openwrt-passwall2' feeds.conf.default
          sed -i '$a src-git dockerce https://github.com/docker/docker-ce' feeds.conf.default
          sed -i '$a src-git libdocker https://github.com/lisaac/luci-lib-docker' feeds.conf.default
          sed -i '$a src-git dockerman https://github.com/lisaac/luci-app-dockerman' feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          # sed -i '$a src-git lienol https://github.com/Lienol/openwrt-package' feeds.conf.default
          # sed -i '$a src-git passwall https://github.com/xiaorouji/openwrt-passwall.git' feeds.conf.default
          # sed -i '$a src-git docker-ce https://github.com/docker/docker-ce' feeds.conf.default
          # sed -i '$a src-git luci-lib-docker https://github.com/lisaac/luci-lib-docker' feeds.conf.default
          # sed -i '$a src-git luci-app-dockerman https://github.com/lisaac/luci-app-dockerman' feeds.conf.default
          # sed -i '$a src-git PWpackages https://github.com/xiaorouji/openwrt-passwall.git' feeds.conf.default
          # sed -i '$a src-git PWluci https://github.com/xiaorouji/openwrt-passwall.git' feeds.conf.default
          # sed -i '$a src-git passwall https://github.com/xiaorouji/openwrt-passwall' feeds.conf.default
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          
          # IPV6支持：
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF
          
          # 常用LuCI插件选择：
          # CONFIG_PACKAGE_luci-app-docker=y
          # CONFIG_PACKAGE_luci-lib-docker=y
          # CONFIG_PACKAGE_luci-app-dockerman=y
          # CONFIG_PACKAGE_docker-ce=y
          # CONFIG_PACKAGE_luci-app-baidupcs-web=y
          # CONFIG_PACKAGE_luci-app-easymesh=y
          # CONFIG_PACKAGE_luci-app-clash=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_IPT2Socks=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_PDNSD=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_SagerNet_Core=y
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall2=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_luci-app-netdata=y
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_Shortcut-FE=y
          CONFIG_PACKAGE_luci-app-alist=y
          CONFIG_PACKAGE_luci-app-nfs=y
          CONFIG_PACKAGE_luci-app-minidlna=y
          CONFIG_PACKAGE_luci-app-adguardhome=y
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          CONFIG_PACKAGE_luci-app-qbittorrent=y
          CONFIG_PACKAGE_kmod-tun=y
          CONFIG_PACKAGE_wget-nossl=y
          CONFIG_PACKAGE_wget-ssl=y
          CONFIG_PACKAGE_luci-app-p910nd=y
          CONFIG_PACKAGE_luci-app-usb-printer=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          EOF
          
      - name: Generate configuration file
        run: make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
