name: Caching with openwrt

on:
  push:
   branches: 
     - master
  #schedule:
  #  - cron: 0 23 * * *
  release:
    types: [published]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  CACHE_VERSION: 1
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # 更新系统，安装必须文件
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -y update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc
        
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm*
        df -h
        #sudo rm -rf /usr/share/dotnet
        #docker rmi `docker images -q`
        #sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        #sudo -E apt-get -y autoremove --purge
        #sudo -E apt-get -y clean
        
        
    # 下载文件
    - name: Cache openwrt dl
      uses: biner/cache@master
      env:
        cache-name: cache-openwrt-dl
      with:
        path: ./dl # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-stable-${{ env.cache-name }}-v${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-stable-${{ env.cache-name }}-v2
    # 工具链
    - name: Cache openwrt staging
      uses: biner/cache@master
      env:
        cache-name-staging: cache-openwrt-stagingd-dir
      with:
        path: ./staging_dir
        key: ${{ runner.os }}-stable-${{ env.cache-name-staging }}-v${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-stable-${{ env.cache-name-staging }}-v2
          
    # 工具链
    - name: Cache openwrt hostpkg
      uses: biner/cache@master
      env:
        cache-name-hostpkg: cache-openwrt-hostpkg
      with:
        path: ./build_dir/hostpkg
        key: ${{ runner.os }}-stable-${{ env.cache-name-hostpkg }}

    # 工具链
    - name: Cache openwrt hostp
      uses: biner/cache@master
      env:
        cache-name-host: cache-openwrt-host
      with:
        path: ./build_dir/host
        key: ${{ runner.os }}-stable-${{ env.cache-name-host }}

    # 工具链
    - name: Cache openwrt target
      uses: biner/cache@master
      env:
        cache-name-target: cache-openwrt-target
      with:
        path: ./build_dir/target-x86_64_musl
        key: ${{ runner.os }}-stable-${{ env.cache-name-target }}
        
    # 工具链
    - name: Cache openwrt toolchain
      uses: biner/cache@master
      env:
        cache-name-toolchain: cache-openwrt-toolchain
      with:
        path: ./build_dir/toolchain-x86_64_gcc-7.5.0_musl
        key: ${{ runner.os }}-stable-${{ env.cache-name-toolchain }}

    - name: space show
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        echo "======================="
        du -h --max-depth=1 ./build_dir


        
    - name: Update feeds
      run: |
        ./scripts/feeds update -a
        
    - name: Install feeds
      run: |
        ./scripts/feeds install -a
        
    # 自定义配置
    - name: Generate configuration file
      run: |
        cp ./makeconfig.d/x86_64.config ./.config
        echo "defconfig start"
        make defconfig
        
    # 下载必要
    - name: Make download
      run: |
        make download -j8
        find ./dl/ -size -1024c -exec rm -f {} \;
        df -h

    - name: space show
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        echo "======================="
        du -h --max-depth=1 ./build_dir

    - name: Compile the firmware
      id: compile
      run: |
        df -h
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
        
    - name: space show
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        echo "======================="
        du -h --max-depth=1 ./build_dir
        echo "======================="
        du -h --max-depth=1 ./bin

    - name: Prepare artifact
      run: |
        find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}
        find ./bin/targets/ -name "*rootfs-squashfs.img.gz" | xargs rm -rf {}
        
    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt firmware
        path: ./bin/targets/
